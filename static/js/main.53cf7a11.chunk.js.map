{"version":3,"sources":["panels/Home.js","App.js","index.js"],"names":["Home","id","notificationSwitch","go","fetchedUser","notificationEnabled","asideContent","onClick","e","defaultChecked","webkitallowfullscreen","mozallowfullscreen","allowFullScreen","allow","frameBorder","src","scrolling","App","useState","activePanel","setActivePanel","setUser","setNotificationEnabled","size","setPopout","url_string","window","location","href","vk_are_notifications_enabled","URL","searchParams","get","useEffect","connect","subscribe","detail","type","data","schemeAttribute","document","createAttribute","value","scheme","body","attributes","setNamedItem","send","then","console","log","a","sendPromise","user","fetchData","fetch","response","json","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"0mBAsCeA,G,OA7BF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAqBC,GAAxB,EAAOC,GAAP,EAAWC,YAAX,EAAwBF,oBAAoBG,EAA5C,EAA4CA,oBAA5C,OACZ,kBAAC,IAAD,CAAOJ,GAAIA,GACV,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAMK,aAAc,kBAAC,IAAD,CAAQC,QAAS,SAAAC,GAAC,OAAIN,EAAmBG,IAAsBI,eAAgBJ,KAAnG,6NAID,4BAAQK,sBAAsB,OAAOC,mBAAmB,OAAOC,gBAAgB,OAC7EC,MAAM,6CAA6CC,YAAY,IAC/DC,IAAI,gDACHC,UAAU,UC8DAC,EAzEH,WAAO,IAAD,EACwBC,mBAAS,QADjC,mBACPC,EADO,KACMC,EADN,OAEiBF,mBAAS,MAF1B,mBAEPd,EAFO,KAEMiB,EAFN,OAGwCH,oBAAS,GAHjD,mBAGPb,EAHO,KAGciB,EAHd,OAIcJ,mBAAS,kBAAC,IAAD,CAAeK,KAAK,WAJ3C,mBAICC,GAJD,WAKRC,EAAaC,OAAOC,SAASC,KAE7BC,EADM,IAAIC,IAAIL,GACqBM,aAAaC,IAAI,gCAE1DC,qBAAU,YACNC,IAAQC,WAAU,YAA6B,IAAD,IAA1BC,OAASC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC/B,GAAa,yBAATD,EAAiC,CACjC,IAAME,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQJ,EAAKK,OAASL,EAAKK,OAAS,eACpDH,SAASI,KAAKC,WAAWC,aAAaP,QAKxCV,IAEUK,IAAQa,KAAK,6BAA8B,IACnDC,MAAK,WACLC,QAAQC,IAAI,UAdR,4CAqBZ,4BAAAC,EAAA,sEACuBjB,IAAQkB,YAAY,uBAD3C,OACUC,EADV,OAEIJ,QAAQC,IAAIG,GACZhC,EAAQgC,GACR7B,EAAU,MAJd,4CArBY,0DA4BZ8B,KACD,IAuBH,OATIlD,GAAeA,EAAYH,IAC3BsD,MAAM,gDAAkDnD,EAAYH,IAC/D+C,MAAK,SAAAQ,GAAQ,OAAIA,EAASC,UAC1BT,MAAK,SAAAQ,GACFP,QAAQC,IAAIM,MAMpB,kBAAC,IAAD,CAAMrC,YAAaA,GACf,kBAAC,EAAD,CAAMlB,GAAG,OACHG,YAAaA,EACbD,GAzBH,SAAAK,GACPY,EAAeZ,EAAEkD,cAAcC,QAAQC,KAyB7BvD,sBAAqBwB,IAAgCA,EACrD3B,mBAxBa,WACvBoB,GAAwBjB,GACpBA,EACA6B,IAAQa,KAAK,6BAA8B,IAE3Cb,IAAQa,KAAK,4BAA6B,SC/CtDb,IAAQa,KAAK,gBAQbc,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,U","file":"static/js/main.53cf7a11.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Switch from '@vkontakte/vkui/dist/components/Switch/Switch';\n\nimport \"./style.css\"\n\nconst Home = ({ id, go, fetchedUser, notificationSwitch, notificationEnabled }) => (\n\t<Panel id={id}>\n\t\t<Group>\n\t\t\t<Cell asideContent={<Switch onClick={e => notificationSwitch(notificationEnabled)} defaultChecked={notificationEnabled}/>}>\n\t\t\t\tУведомления о запусках концертов / акциях\n\t\t\t</Cell>\n\t\t</Group>\n\t\t<iframe webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\" allowFullScreen=\"true\"\n\t\t\t\tallow=\"geolocation; microphone; camera; autoplay;\" frameBorder=\"0\"\n\t\t\t\tsrc=\"https://vk2feed.cultserv.ru/?refcode=glavclub\"\n\t\t\t\t scrolling=\"no\"></iframe>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tnoti_enabled: PropTypes.bool,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\n\nexport default Home;\n","import React, {useState, useEffect} from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\n\nconst App = () => {\n    const [activePanel, setActivePanel] = useState('home');\n    const [fetchedUser, setUser] = useState(null);\n    const [notificationEnabled, setNotificationEnabled] = useState(false);\n    const [popout, setPopout] = useState(<ScreenSpinner size='large'/>);\n    const url_string = window.location.href;\n    const url = new URL(url_string);\n    const vk_are_notifications_enabled = url.searchParams.get(\"vk_are_notifications_enabled\");\n\n    useEffect(() => {\n        connect.subscribe(({detail: {type, data}}) => {\n            if (type === 'VKWebAppUpdateConfig') {\n                const schemeAttribute = document.createAttribute('scheme');\n                schemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n                document.body.attributes.setNamedItem(schemeAttribute);\n            }\n        });\n\n        // TODO включалка нотификаций\n        if (!+vk_are_notifications_enabled) {\n            // setTimeout(() => {\n            const res = connect.send(\"VKWebAppAllowNotifications\", {})\n            res.then(() => {\n                console.log(11111)\n                // setNotificationEnabled(true)\n            })\n            // connect.send(\"VKWebAppDenyNotifications\", {});\n            // }, 60000)\n        }\n\n        async function fetchData() {\n            const user = await connect.sendPromise('VKWebAppGetUserInfo');\n            console.log(user)\n            setUser(user);\n            setPopout(null);\n        }\n\n        fetchData();\n    }, []);\n\n    const go = e => {\n        setActivePanel(e.currentTarget.dataset.to);\n    };\n    const notificationSwitch = () => {\n        setNotificationEnabled(!notificationEnabled)\n        if (notificationEnabled) {\n            connect.send(\"VKWebAppAllowNotifications\", {});\n        } else {\n            connect.send(\"VKWebAppDenyNotifications\", {});\n        }\n        // connect.send(\"VKWebAppAllowNotifications\", {});\n    };\n    if (fetchedUser && fetchedUser.id) {\n        fetch('https://glavclub.com/vk/KwgG259rqFt9gdDNpj8f/' + fetchedUser.id)\n            .then(response => response.json())\n            .then(response => {\n                console.log(response)\n            });\n    }\n\n\n    return (\n        <View activePanel={activePanel}>\n            <Home id='home'\n                  fetchedUser={fetchedUser}\n                  go={go}\n                  notificationEnabled={vk_are_notifications_enabled ? +vk_are_notifications_enabled : false}\n                  notificationSwitch={notificationSwitch}\n            />\n        </View>\n    );\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}